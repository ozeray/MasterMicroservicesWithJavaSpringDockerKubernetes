spring.application.name=gatewayserver

spring.config.import=optional:configserver:http://localhost:8071/

management.endpoints.web.exposure.include=*

## Configuring info endpoint
info.app.name=Gateway Server Microservice
info.app.description=Ahmet Gateway Server Application
info.app.version=1.0.0
management.info.env.enabled=true

management.endpoint.gateway.enabled=true
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true

logging.level.com.ahmet.gatewayserver: DEBUG
#logging.level.org.springframework: DEBUG

# Micrometer related properties
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
#Produce a full Prometheus histogram:
management.metrics.distribution.percentiles-histogram.http.server.requests=true
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

#Was used for client credentials grant flow during the course:
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:7080/realms/master/protocol/openid-connect/certs

#URL for generating token by sending client ID, secret and AUTHORIZATION CODE:
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:7080/realms/master/protocol/openid-connect/token

#URL for redirecting the end-user for supplying his/her credentials and generating AUTHORIZATION CODE:
spring.security.oauth2.client.provider.keycloak.authorization-uri=http://localhost:7080/realms/master/protocol/openid-connect/auth

#In some scenarios, GW would want to learn user details. Here is the URL for it:
spring.security.oauth2.client.provider.keycloak.user-info-uri=http://localhost:7080/realms/master/protocol/openid-connect/userinfo
#And this is the property that will be requested from auth. server in the above scenario:
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

#Here are the config.s for registering Spring GW as an oauth client at the auth. server:
spring.security.oauth2.client.registration.ayozer-gateway.provider=keycloak
spring.security.oauth2.client.registration.ayozer-gateway.scope=openid
spring.security.oauth2.client.registration.ayozer-gateway.client-id=ayozer-gatewayui
spring.security.oauth2.client.registration.ayozer-gateway.client-secret=nEC4JS9zEK5Mh0s2XfUj6JLhTdiV5Jlc
spring.security.oauth2.client.registration.ayozer-gateway.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.ayozer-gateway.redirect-uri={baseUrl}/login/oauth2/code/keycloak

server.servlet.session.cookie.same-site=lax